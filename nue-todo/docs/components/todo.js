import{$ as z}from"/@nue/view-transitions.js";var y={ALL:"all",ACTIVE:"active",COMPLETED:"completed"},A=[{name:"todo",tagName:"section",tmpl:'<section class="todo"> <div class="row"> <input id="allSelect" type="checkbox" @click="0"> <input id="newTodo" placeholder="What needs to be done..." @keyup="1"> </div> <section :for="2"> <div class="row"> <input :if="3" type="checkbox" checked :id="4" @click="5"> <input :if="6" type="checkbox" :id="7" @click="8"> <input :id="9" :value="10" @keyup="11"> <button style="width: 1rem" :id="12" @click="13">X</button> </div> </section> <section> <div class="row">:14:<button $disabled="15" @click="16">All</button> <button $disabled="17" @click="18">Active</button> <button $disabled="19" @click="20">Completed</button> <button $disabled="21" @click="22">Clear</button> </div> </section> </section>',Impl:class{constructor(){this.items=[],this.all=[],this.filter=y.ALL,this.total=0,this.numberCompleted=0}filterItems(h){let{items:k,all:p,total:q}=this;switch(h){case y.ALL:k=JSON.parse(JSON.stringify(p));break;case y.ACTIVE:k=p.filter((x)=>!x.done);break;case y.COMPLETED:k=p.filter((x)=>x.done);break}this.total=p.length,this.items=k,this.numberCompleted=p.filter((x)=>x.done).length}showAll(){let{filter:h}=this;h=y.ALL,this.filterItems(h)}showActive(){let{filter:h}=this;h=y.ACTIVE,this.filterItems(h)}showCompleted(){let{filter:h}=this;h=y.COMPLETED,this.filterItems(h)}newTodo(){let h=z("#newTodo").value;if(!h){alert("Please provide description");return}let{all:k,filter:p}=this,q={id:Date.now(),done:!1,desc:h};k.push(q),z("#newTodo").value="",this.filterItems(p)}getItem(h){let{all:k}=this,p=parseInt(h.currentTarget.id.split("-")[1]);return k.find((q)=>q.id==p)}descUpdate(h){let k=this.getItem(h);k.desc=z("#desc-"+k.id).value;let{filter:p}=this;this.filterItems(p)}doneUpdate(h){let k=this.getItem(h);k.done=!k.done;let{filter:p}=this;this.filterItems(p)}deleteItem(h){let k=this.getItem(h),{all:p,filter:q}=this;this.all=p.filter((x)=>k.id!=x.id),this.filterItems(q)}allSelect(h){let{all:k,filter:p}=this;k.map((q)=>q.done=h.currentTarget.checked?!0:!1),this.filterItems(p)}clearCompleted(h){let{all:k,filter:p}=this;this.all=k.filter((q)=>!q.done),this.filterItems(p)}},fns:[(h,k)=>{h.allSelect.call(h,k)},(h,k)=>{{if(!["enter","return"].includes(k.key.toLowerCase()))return;h.newTodo()}},(h)=>["el",h.items,"$index"],(h)=>h.el.done,(h)=>["chk-",h.el.id],(h,k)=>{h.doneUpdate.call(h,k)},(h)=>!h.el.done,(h)=>["chk-",h.el.id],(h,k)=>{h.doneUpdate.call(h,k)},(h)=>["desc-",h.el.id],(h)=>[h.el.desc],(h,k)=>{{if(!["enter","return"].includes(k.key.toLowerCase()))return;h.descUpdate.call(h,k)}},(h)=>["delbtn-",h.el.id],(h,k)=>{h.deleteItem.call(h,k)},(h)=>[" ",h.total," items "],(h)=>h.total==0,(h,k)=>{h.showAll.call(h,k)},(h)=>h.total==0,(h,k)=>{h.showActive.call(h,k)},(h)=>h.total==0,(h,k)=>{h.showCompleted.call(h,k)},(h)=>h.numberCompleted==0,(h,k)=>{h.clearCompleted.call(h,k)}]}],C=A[0];export{A as lib,C as default};
